# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        source-url: https://nuget.pkg.github.com/experianplc/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    - name: Restore dependencies
      run: dotnet restore
      working-directory: csharp/
    - name: Build
          run: dotnet build --no-restore --configuration Release -p:Version=${{ env.SDKVERSION }} DVSClient.sln
      working-directory: csharp/
    #- name: Test with dotnet
    #  run: dotnet test --no-restore --logger trx --results-directory "TestResults-${{ matrix.dotnet-version }}"
    #- name: Upload dotnet test results
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: dotnet-results-${{ matrix.dotnet-version }}
    #    path: TestResults-${{ matrix.dotnet-version }}
    #  # Use always() to always run this step to publish test results when there are test failures
    #  if: ${{ always() }}
    - name: Pack and publish
      run: |
        dotnet pack --configuration Release -p:PackageVersion=${{ env.SDKVERSION }} -p:NuspecFile=DVS.SDKs.nuspec DVSClient/DVSClient/DVSClient.csproj
        dotnet nuget push "DVSClient/DVSClient/bin/Release/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }}
      working-directory: csharp/