using DVSClient.Address;
using DVSClient.Common;

namespace DVSClient.Address
{
    public class Dataset
    {
        public static readonly Dataset AdAddressEd;
        public static readonly Dataset AdAddressEh;
        public static readonly Dataset AeAddressEd;
        public static readonly Dataset AeAddressEh;
        public static readonly Dataset AfAddressEd;
        public static readonly Dataset AfAddressEh;
        public static readonly Dataset AgAddressEd;
        public static readonly Dataset AgAddressEh;
        public static readonly Dataset AiAddressEd;
        public static readonly Dataset AiAddressEh;
        public static readonly Dataset AlAddressEd;
        public static readonly Dataset AlAddressEh;
        public static readonly Dataset AmAddressEd;
        public static readonly Dataset AmAddressEh;
        public static readonly Dataset AoAddressEd;
        public static readonly Dataset AoAddressEh;
        public static readonly Dataset AqAddressEd;
        public static readonly Dataset ArAddressEd;
        public static readonly Dataset ArAddressEh;
        public static readonly Dataset AsAddressEh;
        public static readonly Dataset AtAddressEd;
        public static readonly Dataset AtAddressEh;
        public static readonly Dataset AuAddress;
        public static readonly Dataset AuAddressDatafusion;
        public static readonly Dataset AuAddressGnaf;
        public static readonly Dataset AwAddressEd;
        public static readonly Dataset AwAddressEh;
        public static readonly Dataset AzAddressEd;
        public static readonly Dataset AzAddressEh;
        public static readonly Dataset BaAddressEd;
        public static readonly Dataset BaAddressEh;
        public static readonly Dataset BbAddressEd;
        public static readonly Dataset BbAddressEh;
        public static readonly Dataset BdAddressEd;
        public static readonly Dataset BdAddressEh;
        public static readonly Dataset BeAddress;
        public static readonly Dataset BeAddressEd;
        public static readonly Dataset BeAddressEh;
        public static readonly Dataset BfAddressEd;
        public static readonly Dataset BfAddressEh;
        public static readonly Dataset BgAddressEd;
        public static readonly Dataset BgAddressEh;
        public static readonly Dataset BhAddressEd;
        public static readonly Dataset BhAddressEh;
        public static readonly Dataset BiAddressEh;
        public static readonly Dataset BjAddressEd;
        public static readonly Dataset BjAddressEh;
        public static readonly Dataset BlAddressEd;
        public static readonly Dataset BlAddressEh;
        public static readonly Dataset BmAddressEd;
        public static readonly Dataset BmAddressEh;
        public static readonly Dataset BnAddressEd;
        public static readonly Dataset BnAddressEh;
        public static readonly Dataset BoAddressEd;
        public static readonly Dataset BoAddressEh;
        public static readonly Dataset BqAddressEd;
        public static readonly Dataset BqAddressEh;
        public static readonly Dataset BrAddressEd;
        public static readonly Dataset BrAddressEh;
        public static readonly Dataset BsAddressEd;
        public static readonly Dataset BsAddressEh;
        public static readonly Dataset BtAddressEd;
        public static readonly Dataset BtAddressEh;
        public static readonly Dataset BwAddressEd;
        public static readonly Dataset BwAddressEh;
        public static readonly Dataset ByAddressEd;
        public static readonly Dataset ByAddressEh;
        public static readonly Dataset BzAddressEd;
        public static readonly Dataset BzAddressEh;
        public static readonly Dataset CaAddress;
        public static readonly Dataset CcAddressEh;
        public static readonly Dataset CdAddressEd;
        public static readonly Dataset CdAddressEh;
        public static readonly Dataset CfAddressEd;
        public static readonly Dataset CfAddressEh;
        public static readonly Dataset CgAddressEd;
        public static readonly Dataset CgAddressEh;
        public static readonly Dataset ChAddress;
        public static readonly Dataset ChAddressEd;
        public static readonly Dataset ChAddressEh;
        public static readonly Dataset CkAddressEd;
        public static readonly Dataset CkAddressEh;
        public static readonly Dataset ClAddressEd;
        public static readonly Dataset ClAddressEh;
        public static readonly Dataset CmAddressEd;
        public static readonly Dataset CmAddressEh;
        public static readonly Dataset CnAddressEd;
        public static readonly Dataset CnAddressEh;
        public static readonly Dataset CoAddressEd;
        public static readonly Dataset CoAddressEh;
        public static readonly Dataset CrAddressEd;
        public static readonly Dataset CrAddressEh;
        public static readonly Dataset CuAddressEd;
        public static readonly Dataset CuAddressEh;
        public static readonly Dataset CvAddressEd;
        public static readonly Dataset CvAddressEh;
        public static readonly Dataset CwAddressEd;
        public static readonly Dataset CwAddressEh;
        public static readonly Dataset CxAddressEh;
        public static readonly Dataset CyAddressEd;
        public static readonly Dataset CyAddressEh;
        public static readonly Dataset CzAddressEd;
        public static readonly Dataset CzAddressEh;
        public static readonly Dataset DeAddress;
        public static readonly Dataset DeAddressEd;
        public static readonly Dataset DeAddressEh;
        public static readonly Dataset DjAddressEd;
        public static readonly Dataset DjAddressEh;
        public static readonly Dataset DkAddress;
        public static readonly Dataset DkAddressEh;
        public static readonly Dataset DmAddressEd;
        public static readonly Dataset DmAddressEh;
        public static readonly Dataset DoAddressEd;
        public static readonly Dataset DoAddressEh;
        public static readonly Dataset DzAddressEd;
        public static readonly Dataset DzAddressEh;
        public static readonly Dataset EcAddressEd;
        public static readonly Dataset EcAddressEh;
        public static readonly Dataset EeAddressEd;
        public static readonly Dataset EeAddressEh;
        public static readonly Dataset EgAddressEd;
        public static readonly Dataset EgAddressEh;
        public static readonly Dataset EhAddressEd;
        public static readonly Dataset EhAddressEh;
        public static readonly Dataset ErAddressEd;
        public static readonly Dataset ErAddressEh;
        public static readonly Dataset EsAddress;
        public static readonly Dataset EsAddressEd;
        public static readonly Dataset EsAddressEh;
        public static readonly Dataset EtAddressEd;
        public static readonly Dataset EtAddressEh;
        public static readonly Dataset FiAddress;
        public static readonly Dataset FiAddressEd;
        public static readonly Dataset FiAddressEh;
        public static readonly Dataset FjAddressEd;
        public static readonly Dataset FjAddressEh;
        public static readonly Dataset FkAddressEd;
        public static readonly Dataset FkAddressEh;
        public static readonly Dataset FmAddressEd;
        public static readonly Dataset FmAddressEh;
        public static readonly Dataset FoAddressEd;
        public static readonly Dataset FoAddressEh;
        public static readonly Dataset FrAddress;
        public static readonly Dataset FrAddressHexaline3;
        public static readonly Dataset FrAddressStreetLevel;
        public static readonly Dataset GaAddressEd;
        public static readonly Dataset GaAddressEh;
        public static readonly Dataset GbAdditionalAddressbaseislands;
        public static readonly Dataset GbAdditionalBusiness;
        public static readonly Dataset GbAdditionalBusinessextended;
        public static readonly Dataset GbAdditionalElectricity;
        public static readonly Dataset GbAdditionalGas;
        public static readonly Dataset GbAdditionalMultipleresidence;
        public static readonly Dataset GbAdditionalNames;
        public static readonly Dataset GbAdditionalNotyetbuilt;
        public static readonly Dataset GbAddress;
        public static readonly Dataset GbAddressAddressbase;
        public static readonly Dataset GbAddressStreetlevel;
        public static readonly Dataset GbAddressWales;
        public static readonly Dataset GdAddressEd;
        public static readonly Dataset GdAddressEh;
        public static readonly Dataset GeAddressEd;
        public static readonly Dataset GeAddressEh;
        public static readonly Dataset GfAddressEd;
        public static readonly Dataset GfAddressEh;
        public static readonly Dataset GhAddressEd;
        public static readonly Dataset GhAddressEh;
        public static readonly Dataset GiAddressEd;
        public static readonly Dataset GiAddressEh;
        public static readonly Dataset GlAddressEd;
        public static readonly Dataset GlAddressEh;
        public static readonly Dataset GmAddressEd;
        public static readonly Dataset GmAddressEh;
        public static readonly Dataset GnAddressEd;
        public static readonly Dataset GnAddressEh;
        public static readonly Dataset GpAddressEd;
        public static readonly Dataset GpAddressEh;
        public static readonly Dataset GqAddressEd;
        public static readonly Dataset GqAddressEh;
        public static readonly Dataset GrAddressEd;
        public static readonly Dataset GrAddressEh;
        public static readonly Dataset GsAddressEd;
        public static readonly Dataset GsAddressEh;
        public static readonly Dataset GtAddressEd;
        public static readonly Dataset GtAddressEh;
        public static readonly Dataset GuAddressEd;
        public static readonly Dataset GuAddressEh;
        public static readonly Dataset GyAddressEd;
        public static readonly Dataset GyAddressEh;
        public static readonly Dataset HkAddressEd;
        public static readonly Dataset HkAddressEh;
        public static readonly Dataset HnAddressEd;
        public static readonly Dataset HnAddressEh;
        public static readonly Dataset HrAddressEd;
        public static readonly Dataset HrAddressEh;
        public static readonly Dataset HtAddressEd;
        public static readonly Dataset HtAddressEh;
        public static readonly Dataset HuAddressEd;
        public static readonly Dataset HuAddressEh;
        public static readonly Dataset IdAddressEd;
        public static readonly Dataset IdAddressEh;
        public static readonly Dataset IeAdditionalEircode;
        public static readonly Dataset IeAddress;
        public static readonly Dataset IeAddressEcad;
        public static readonly Dataset IeAddressEh;
        public static readonly Dataset IlAddressEd;
        public static readonly Dataset IlAddressEh;
        public static readonly Dataset InAddressEd;
        public static readonly Dataset InAddressEh;
        public static readonly Dataset IoAddressEd;
        public static readonly Dataset IqAddressEd;
        public static readonly Dataset IqAddressEh;
        public static readonly Dataset IrAddressEd;
        public static readonly Dataset IrAddressEh;
        public static readonly Dataset IsAddressEd;
        public static readonly Dataset IsAddressEh;
        public static readonly Dataset ItAddressEd;
        public static readonly Dataset ItAddressEh;
        public static readonly Dataset JmAddressEd;
        public static readonly Dataset JmAddressEh;
        public static readonly Dataset JoAddressEd;
        public static readonly Dataset JoAddressEh;
        public static readonly Dataset JpAddress;
        public static readonly Dataset JpAddressEa;
        public static readonly Dataset JpAddressEd;
        public static readonly Dataset KeAddressEd;
        public static readonly Dataset KeAddressEh;
        public static readonly Dataset KgAddressEd;
        public static readonly Dataset KgAddressEh;
        public static readonly Dataset KhAddressEd;
        public static readonly Dataset KhAddressEh;
        public static readonly Dataset KiAddressEd;
        public static readonly Dataset KiAddressEh;
        public static readonly Dataset KmAddressEd;
        public static readonly Dataset KmAddressEh;
        public static readonly Dataset KnAddressEd;
        public static readonly Dataset KnAddressEh;
        public static readonly Dataset KpAddressEd;
        public static readonly Dataset KpAddressEh;
        public static readonly Dataset KrAddressEd;
        public static readonly Dataset KrAddressEh;
        public static readonly Dataset KwAddressEd;
        public static readonly Dataset KwAddressEh;
        public static readonly Dataset KyAddressEd;
        public static readonly Dataset KyAddressEh;
        public static readonly Dataset KzAddressEd;
        public static readonly Dataset KzAddressEh;
        public static readonly Dataset LaAddressEd;
        public static readonly Dataset LaAddressEh;
        public static readonly Dataset LbAddressEd;
        public static readonly Dataset LbAddressEh;
        public static readonly Dataset LcAddressEd;
        public static readonly Dataset LcAddressEh;
        public static readonly Dataset LiAddressEd;
        public static readonly Dataset LiAddressEh;
        public static readonly Dataset LkAddressEd;
        public static readonly Dataset LkAddressEh;
        public static readonly Dataset LrAddressEd;
        public static readonly Dataset LrAddressEh;
        public static readonly Dataset LsAddressEd;
        public static readonly Dataset LsAddressEh;
        public static readonly Dataset LtAddressEd;
        public static readonly Dataset LtAddressEh;
        public static readonly Dataset LuAddress;
        public static readonly Dataset LuAddressEh;
        public static readonly Dataset LvAddressEd;
        public static readonly Dataset LvAddressEh;
        public static readonly Dataset LyAddressEd;
        public static readonly Dataset LyAddressEh;
        public static readonly Dataset MaAddressEd;
        public static readonly Dataset MaAddressEh;
        public static readonly Dataset McAddressEd;
        public static readonly Dataset McAddressEh;
        public static readonly Dataset MdAddressEd;
        public static readonly Dataset MdAddressEh;
        public static readonly Dataset MeAddressEd;
        public static readonly Dataset MeAddressEh;
        public static readonly Dataset MfAddressEd;
        public static readonly Dataset MfAddressEh;
        public static readonly Dataset MgAddressEd;
        public static readonly Dataset MgAddressEh;
        public static readonly Dataset MhAddressEd;
        public static readonly Dataset MhAddressEh;
        public static readonly Dataset MkAddressEd;
        public static readonly Dataset MkAddressEh;
        public static readonly Dataset MlAddressEd;
        public static readonly Dataset MlAddressEh;
        public static readonly Dataset MmAddressEd;
        public static readonly Dataset MmAddressEh;
        public static readonly Dataset MnAddressEd;
        public static readonly Dataset MnAddressEh;
        public static readonly Dataset MoAddressEd;
        public static readonly Dataset MoAddressEh;
        public static readonly Dataset MpAddressEd;
        public static readonly Dataset MpAddressEh;
        public static readonly Dataset MqAddressEd;
        public static readonly Dataset MqAddressEh;
        public static readonly Dataset MrAddressEd;
        public static readonly Dataset MrAddressEh;
        public static readonly Dataset MsAddressEd;
        public static readonly Dataset MsAddressEh;
        public static readonly Dataset MtAddressEd;
        public static readonly Dataset MtAddressEh;
        public static readonly Dataset MuAddressEd;
        public static readonly Dataset MuAddressEh;
        public static readonly Dataset MvAddressEd;
        public static readonly Dataset MvAddressEh;
        public static readonly Dataset MwAddressEd;
        public static readonly Dataset MwAddressEh;
        public static readonly Dataset MxAddressEd;
        public static readonly Dataset MxAddressEh;
        public static readonly Dataset MyAddressEd;
        public static readonly Dataset MyAddressEh;
        public static readonly Dataset MzAddressEd;
        public static readonly Dataset MzAddressEh;
        public static readonly Dataset NaAddressEd;
        public static readonly Dataset NaAddressEh;
        public static readonly Dataset NcAddressEd;
        public static readonly Dataset NcAddressEh;
        public static readonly Dataset NeAddressEd;
        public static readonly Dataset NeAddressEh;
        public static readonly Dataset NfAddressEd;
        public static readonly Dataset NfAddressEh;
        public static readonly Dataset NgAddressEd;
        public static readonly Dataset NgAddressEh;
        public static readonly Dataset NiAddressEd;
        public static readonly Dataset NiAddressEh;
        public static readonly Dataset NlAddress;
        public static readonly Dataset NlAddressEh;
        public static readonly Dataset NoAddress;
        public static readonly Dataset NoAddressEd;
        public static readonly Dataset NoAddressEh;
        public static readonly Dataset NpAddressEd;
        public static readonly Dataset NpAddressEh;
        public static readonly Dataset NrAddressEd;
        public static readonly Dataset NrAddressEh;
        public static readonly Dataset NuAddressEd;
        public static readonly Dataset NuAddressEh;
        public static readonly Dataset NzAdditionalDatafusion;
        public static readonly Dataset NzAddress;
        public static readonly Dataset OmAddressEd;
        public static readonly Dataset OmAddressEh;
        public static readonly Dataset PaAddressEd;
        public static readonly Dataset PaAddressEh;
        public static readonly Dataset PeAddressEd;
        public static readonly Dataset PeAddressEh;
        public static readonly Dataset PfAddressEd;
        public static readonly Dataset PfAddressEh;
        public static readonly Dataset PgAddressEd;
        public static readonly Dataset PgAddressEh;
        public static readonly Dataset PhAddressEd;
        public static readonly Dataset PhAddressEh;
        public static readonly Dataset PkAddressEd;
        public static readonly Dataset PkAddressEh;
        public static readonly Dataset PlAddressEd;
        public static readonly Dataset PlAddressEh;
        public static readonly Dataset PmAddressEd;
        public static readonly Dataset PmAddressEh;
        public static readonly Dataset PnAddressEd;
        public static readonly Dataset PnAddressEh;
        public static readonly Dataset PsAddressEd;
        public static readonly Dataset PsAddressEh;
        public static readonly Dataset PtAddressEd;
        public static readonly Dataset PtAddressEh;
        public static readonly Dataset PwAddressEd;
        public static readonly Dataset PwAddressEh;
        public static readonly Dataset PyAddressEd;
        public static readonly Dataset PyAddressEh;
        public static readonly Dataset QaAddressEd;
        public static readonly Dataset QaAddressEh;
        public static readonly Dataset ReAddressEd;
        public static readonly Dataset ReAddressEh;
        public static readonly Dataset RoAddressEd;
        public static readonly Dataset RoAddressEh;
        public static readonly Dataset RsAddressEd;
        public static readonly Dataset RsAddressEh;
        public static readonly Dataset RuAddressEd;
        public static readonly Dataset RuAddressEh;
        public static readonly Dataset RwAddressEd;
        public static readonly Dataset RwAddressEh;
        public static readonly Dataset SaAddressEd;
        public static readonly Dataset SaAddressEh;
        public static readonly Dataset SbAddressEd;
        public static readonly Dataset SbAddressEh;
        public static readonly Dataset ScAddressEd;
        public static readonly Dataset ScAddressEh;
        public static readonly Dataset SdAddressEd;
        public static readonly Dataset SdAddressEh;
        public static readonly Dataset SeAddress;
        public static readonly Dataset SeAddressEd;
        public static readonly Dataset SeAddressEh;
        public static readonly Dataset SgAddress;
        public static readonly Dataset ShAddressEd;
        public static readonly Dataset ShAddressEh;
        public static readonly Dataset SiAddressEd;
        public static readonly Dataset SiAddressEh;
        public static readonly Dataset SjAddressEd;
        public static readonly Dataset SjAddressEh;
        public static readonly Dataset SkAddressEd;
        public static readonly Dataset SkAddressEh;
        public static readonly Dataset SlAddressEd;
        public static readonly Dataset SlAddressEh;
        public static readonly Dataset SmAddressEd;
        public static readonly Dataset SmAddressEh;
        public static readonly Dataset SnAddressEd;
        public static readonly Dataset SnAddressEh;
        public static readonly Dataset SoAddressEd;
        public static readonly Dataset SoAddressEh;
        public static readonly Dataset SrAddressEd;
        public static readonly Dataset SrAddressEh;
        public static readonly Dataset SsAddressEd;
        public static readonly Dataset SsAddressEh;
        public static readonly Dataset StAddressEd;
        public static readonly Dataset StAddressEh;
        public static readonly Dataset SvAddressEd;
        public static readonly Dataset SvAddressEh;
        public static readonly Dataset SyAddressEd;
        public static readonly Dataset SyAddressEh;
        public static readonly Dataset SzAddressEd;
        public static readonly Dataset SzAddressEh;
        public static readonly Dataset TcAddressEd;
        public static readonly Dataset TcAddressEh;
        public static readonly Dataset TdAddressEd;
        public static readonly Dataset TdAddressEh;
        public static readonly Dataset TgAddressEd;
        public static readonly Dataset TgAddressEh;
        public static readonly Dataset ThAddressEd;
        public static readonly Dataset ThAddressEh;
        public static readonly Dataset TjAddressEd;
        public static readonly Dataset TjAddressEh;
        public static readonly Dataset TkAddressEd;
        public static readonly Dataset TkAddressEh;
        public static readonly Dataset TlAddressEd;
        public static readonly Dataset TlAddressEh;
        public static readonly Dataset TmAddressEd;
        public static readonly Dataset TmAddressEh;
        public static readonly Dataset TnAddressEd;
        public static readonly Dataset TnAddressEh;
        public static readonly Dataset ToAddressEd;
        public static readonly Dataset ToAddressEh;
        public static readonly Dataset TrAddressEd;
        public static readonly Dataset TrAddressEh;
        public static readonly Dataset TtAddressEd;
        public static readonly Dataset TtAddressEh;
        public static readonly Dataset TvAddressEd;
        public static readonly Dataset TvAddressEh;
        public static readonly Dataset TwAddressEd;
        public static readonly Dataset TwAddressEh;
        public static readonly Dataset TzAddressEd;
        public static readonly Dataset TzAddressEh;
        public static readonly Dataset UaAddressEd;
        public static readonly Dataset UaAddressEh;
        public static readonly Dataset UgAddressEd;
        public static readonly Dataset UgAddressEh;
        public static readonly Dataset UsAddress;
        public static readonly Dataset UyAddressEd;
        public static readonly Dataset UyAddressEh;
        public static readonly Dataset UzAddressEd;
        public static readonly Dataset UzAddressEh;
        public static readonly Dataset VaAddressEd;
        public static readonly Dataset VaAddressEh;
        public static readonly Dataset VcAddressEd;
        public static readonly Dataset VcAddressEh;
        public static readonly Dataset VeAddressEd;
        public static readonly Dataset VeAddressEh;
        public static readonly Dataset VgAddressEd;
        public static readonly Dataset VgAddressEh;
        public static readonly Dataset ViAddressEd;
        public static readonly Dataset ViAddressEh;
        public static readonly Dataset VnAddressEd;
        public static readonly Dataset VnAddressEh;
        public static readonly Dataset VuAddressEd;
        public static readonly Dataset VuAddressEh;
        public static readonly Dataset WfAddressEd;
        public static readonly Dataset WfAddressEh;
        public static readonly Dataset WsAddressEd;
        public static readonly Dataset WsAddressEh;
        public static readonly Dataset XkAddressEd;
        public static readonly Dataset XkAddressEh;
        public static readonly Dataset YeAddressEd;
        public static readonly Dataset YeAddressEh;
        public static readonly Dataset YtAddressEd;
        public static readonly Dataset YtAddressEh;
        public static readonly Dataset ZaAddressEd;
        public static readonly Dataset ZaAddressEh;
        public static readonly Dataset ZmAddressEd;
        public static readonly Dataset ZmAddressEh;
        public static readonly Dataset ZwAddressEd;
        public static readonly Dataset ZwAddressEh;

        public string DatasetCode { get; }
        public Country Country { get; }
        public IEnumerable<SearchType> SearchTypes { get; }
        public Accuracy AddressAccuracy { get; }
        public Accuracy GeocodeAccuracy { get; }

        private static readonly Dictionary<string, Dataset> datasetMap;

        static Dataset()
        {
            datasetMap = new Dictionary<string, Dataset>();

            AdAddressEd = new Dataset("ad-address-ed", Country.Andorra, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.A);
            AdAddressEh = new Dataset("ad-address-eh", Country.Andorra, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            AeAddressEd = new Dataset("ae-address-ed", Country.UnitedArabEmirates, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            AeAddressEh = new Dataset("ae-address-eh", Country.UnitedArabEmirates, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            AfAddressEd = new Dataset("af-address-ed", Country.Afghanistan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.B);
            AfAddressEh = new Dataset("af-address-eh", Country.Afghanistan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.B);
            AgAddressEd = new Dataset("ag-address-ed", Country.AntiguaAndBarbuda, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.B);
            AgAddressEh = new Dataset("ag-address-eh", Country.AntiguaAndBarbuda, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.B);
            AiAddressEd = new Dataset("ai-address-ed", Country.Anguilla, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.AMinus, Accuracy.BMinus);
            AiAddressEh = new Dataset("ai-address-eh", Country.Anguilla, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            AlAddressEd = new Dataset("al-address-ed", Country.Albania, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.A);
            AlAddressEh = new Dataset("al-address-eh", Country.Albania, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            AmAddressEd = new Dataset("am-address-ed", Country.Armenia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.AMinus);
            AmAddressEh = new Dataset("am-address-eh", Country.Armenia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.AMinus);
            AoAddressEd = new Dataset("ao-address-ed", Country.Angola, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            AoAddressEh = new Dataset("ao-address-eh", Country.Angola, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.B, Accuracy.BMinus);
            AqAddressEd = new Dataset("aq-address-ed", Country.Antarctica, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.AMinus, Accuracy.B);
            ArAddressEd = new Dataset("ar-address-ed", Country.Argentina, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ArAddressEh = new Dataset("ar-address-eh", Country.Argentina, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            AsAddressEh = new Dataset("as-address-eh", Country.AmericanSamoa, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.B, Accuracy.BMinus);
            AtAddressEd = new Dataset("at-address-ed", Country.Austria, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            AtAddressEh = new Dataset("at-address-eh", Country.Austria, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            AuAddress = new Dataset("au-address", Country.Australia, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            AuAddressDatafusion = new Dataset("au-address-datafusion", Country.Australia, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            AuAddressGnaf = new Dataset("au-address-gnaf", Country.Australia, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            AwAddressEd = new Dataset("aw-address-ed", Country.Aruba, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            AwAddressEh = new Dataset("aw-address-eh", Country.Aruba, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            AzAddressEd = new Dataset("az-address-ed", Country.Azerbaijan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.APlus);
            AzAddressEh = new Dataset("az-address-eh", Country.Azerbaijan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BaAddressEd = new Dataset("ba-address-ed", Country.BosniaAndHerzegovina, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.APlus);
            BaAddressEh = new Dataset("ba-address-eh", Country.BosniaAndHerzegovina, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BbAddressEd = new Dataset("bb-address-ed", Country.Barbados, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            BbAddressEh = new Dataset("bb-address-eh", Country.Barbados, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            BdAddressEd = new Dataset("bd-address-ed", Country.Bangladesh, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            BdAddressEh = new Dataset("bd-address-eh", Country.Bangladesh, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            BeAddress = new Dataset("be-address", Country.Belgium, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            BeAddressEd = new Dataset("be-address-ed", Country.Belgium, new List<SearchType> { SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            BeAddressEh = new Dataset("be-address-eh", Country.Belgium, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BfAddressEd = new Dataset("bf-address-ed", Country.BurkinaFaso, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BfAddressEh = new Dataset("bf-address-eh", Country.BurkinaFaso, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BgAddressEd = new Dataset("bg-address-ed", Country.Bulgaria, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            BgAddressEh = new Dataset("bg-address-eh", Country.Bulgaria, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BhAddressEd = new Dataset("bh-address-ed", Country.Bahrain, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.A);
            BhAddressEh = new Dataset("bh-address-eh", Country.Bahrain, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            BiAddressEh = new Dataset("bi-address-eh", Country.Burundi, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            BjAddressEd = new Dataset("bj-address-ed", Country.Benin, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BjAddressEh = new Dataset("bj-address-eh", Country.Benin, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BlAddressEd = new Dataset("bl-address-ed", Country.SaintBarthelemy, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BlAddressEh = new Dataset("bl-address-eh", Country.SaintBarthelemy, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BmAddressEd = new Dataset("bm-address-ed", Country.Bermuda, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BmAddressEh = new Dataset("bm-address-eh", Country.Bermuda, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BnAddressEd = new Dataset("bn-address-ed", Country.BruneiDarussalam, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.AMinus, Accuracy.A);
            BnAddressEh = new Dataset("bn-address-eh", Country.BruneiDarussalam, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            BoAddressEd = new Dataset("bo-address-ed", Country.Bolivia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.BMinus);
            BoAddressEh = new Dataset("bo-address-eh", Country.Bolivia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.BMinus);
            BqAddressEd = new Dataset("bq-address-ed", Country.BonaireSintEustatiusAndSaba, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BqAddressEh = new Dataset("bq-address-eh", Country.BonaireSintEustatiusAndSaba, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BrAddressEd = new Dataset("br-address-ed", Country.Brazil, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            BrAddressEh = new Dataset("br-address-eh", Country.Brazil, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BsAddressEd = new Dataset("bs-address-ed", Country.Bahamas, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.AMinus, Accuracy.A);
            BsAddressEh = new Dataset("bs-address-eh", Country.Bahamas, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            BtAddressEd = new Dataset("bt-address-ed", Country.Bhutan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            BtAddressEh = new Dataset("bt-address-eh", Country.Bhutan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            BwAddressEd = new Dataset("bw-address-ed", Country.Botswana, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.A);
            BwAddressEh = new Dataset("bw-address-eh", Country.Botswana, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.A);
            ByAddressEd = new Dataset("by-address-ed", Country.Belarus, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ByAddressEh = new Dataset("by-address-eh", Country.Belarus, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            BzAddressEd = new Dataset("bz-address-ed", Country.Belize, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            BzAddressEh = new Dataset("bz-address-eh", Country.Belize, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            CaAddress = new Dataset("ca-address", Country.Canada, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            CcAddressEh = new Dataset("cc-address-eh", Country.CocosIsland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            CdAddressEd = new Dataset("cd-address-ed", Country.CongoDemocraticRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            CdAddressEh = new Dataset("cd-address-eh", Country.CongoDemocraticRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            CfAddressEd = new Dataset("cf-address-ed", Country.CentralAfricanRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            CfAddressEh = new Dataset("cf-address-eh", Country.CentralAfricanRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            CgAddressEd = new Dataset("cg-address-ed", Country.Congo, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            CgAddressEh = new Dataset("cg-address-eh", Country.Congo, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            ChAddress = new Dataset("ch-address", Country.Switzerland, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            ChAddressEd = new Dataset("ch-address-ed", Country.Switzerland, new List<SearchType> { SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ChAddressEh = new Dataset("ch-address-eh", Country.Switzerland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CkAddressEd = new Dataset("ck-address-ed", Country.CookIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            CkAddressEh = new Dataset("ck-address-eh", Country.CookIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ClAddressEd = new Dataset("cl-address-ed", Country.Chile, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ClAddressEh = new Dataset("cl-address-eh", Country.Chile, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CmAddressEd = new Dataset("cm-address-ed", Country.Cameroon, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            CmAddressEh = new Dataset("cm-address-eh", Country.Cameroon, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            CnAddressEd = new Dataset("cn-address-ed", Country.China, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            CnAddressEh = new Dataset("cn-address-eh", Country.China, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CoAddressEd = new Dataset("co-address-ed", Country.Colombia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            CoAddressEh = new Dataset("co-address-eh", Country.Colombia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CrAddressEd = new Dataset("cr-address-ed", Country.CostaRica, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            CrAddressEh = new Dataset("cr-address-eh", Country.CostaRica, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CuAddressEd = new Dataset("cu-address-ed", Country.Cuba, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            CuAddressEh = new Dataset("cu-address-eh", Country.Cuba, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            CvAddressEd = new Dataset("cv-address-ed", Country.CapeVerde, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            CvAddressEh = new Dataset("cv-address-eh", Country.CapeVerde, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            CwAddressEd = new Dataset("cw-address-ed", Country.Curacao, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            CwAddressEh = new Dataset("cw-address-eh", Country.Curacao, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            CxAddressEh = new Dataset("cx-address-eh", Country.ChristmasIsland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            CyAddressEd = new Dataset("cy-address-ed", Country.Cyprus, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            CyAddressEh = new Dataset("cy-address-eh", Country.Cyprus, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            CzAddressEd = new Dataset("cz-address-ed", Country.CzechRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            CzAddressEh = new Dataset("cz-address-eh", Country.CzechRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            DeAddress = new Dataset("de-address", Country.Germany, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            DeAddressEd = new Dataset("de-address-ed", Country.Germany, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            DeAddressEh = new Dataset("de-address-eh", Country.Germany, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            DjAddressEd = new Dataset("dj-address-ed", Country.Djibouti, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            DjAddressEh = new Dataset("dj-address-eh", Country.Djibouti, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            DkAddress = new Dataset("dk-address", Country.Denmark, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            DkAddressEh = new Dataset("dk-address-eh", Country.Denmark, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            DmAddressEd = new Dataset("dm-address-ed", Country.Dominica, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            DmAddressEh = new Dataset("dm-address-eh", Country.Dominica, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            DoAddressEd = new Dataset("do-address-ed", Country.DominicanRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            DoAddressEh = new Dataset("do-address-eh", Country.DominicanRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            DzAddressEd = new Dataset("dz-address-ed", Country.Algeria, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.APlus);
            DzAddressEh = new Dataset("dz-address-eh", Country.Algeria, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.APlus);
            EcAddressEd = new Dataset("ec-address-ed", Country.Ecuador, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            EcAddressEh = new Dataset("ec-address-eh", Country.Ecuador, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            EeAddressEd = new Dataset("ee-address-ed", Country.Estonia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            EeAddressEh = new Dataset("ee-address-eh", Country.Estonia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            EgAddressEd = new Dataset("eg-address-ed", Country.Egypt, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            EgAddressEh = new Dataset("eg-address-eh", Country.Egypt, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            EhAddressEd = new Dataset("eh-address-ed", Country.WesternSahara, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            EhAddressEh = new Dataset("eh-address-eh", Country.WesternSahara, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ErAddressEd = new Dataset("er-address-ed", Country.Eritrea, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ErAddressEh = new Dataset("er-address-eh", Country.Eritrea, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            EsAddress = new Dataset("es-address", Country.Spain, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            EsAddressEd = new Dataset("es-address-ed", Country.Spain, new List<SearchType> { SearchType.Validate }, Accuracy.APlus, Accuracy.APlus);
            EsAddressEh = new Dataset("es-address-eh", Country.Spain, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            EtAddressEd = new Dataset("et-address-ed", Country.Ethiopia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            EtAddressEh = new Dataset("et-address-eh", Country.Ethiopia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            FiAddress = new Dataset("fi-address", Country.Finland, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            FiAddressEd = new Dataset("fi-address-ed", Country.Finland, new List<SearchType> { SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            FiAddressEh = new Dataset("fi-address-eh", Country.Finland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            FjAddressEd = new Dataset("fj-address-ed", Country.Fiji, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            FjAddressEh = new Dataset("fj-address-eh", Country.Fiji, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            FkAddressEd = new Dataset("fk-address-ed", Country.FalklandIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            FkAddressEh = new Dataset("fk-address-eh", Country.FalklandIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            FmAddressEd = new Dataset("fm-address-ed", Country.Micronesia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            FmAddressEh = new Dataset("fm-address-eh", Country.Micronesia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            FoAddressEd = new Dataset("fo-address-ed", Country.FaroeIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            FoAddressEh = new Dataset("fo-address-eh", Country.FaroeIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            FrAddress = new Dataset("fr-address", Country.France, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            FrAddressHexaline3 = new Dataset("fr-additional-hexaline3", Country.France, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            FrAddressStreetLevel = new Dataset("fr-address-streetlevel", Country.France, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.AMinus, Accuracy.APlus);
            GaAddressEd = new Dataset("ga-address-ed", Country.Gabon, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GaAddressEh = new Dataset("ga-address-eh", Country.Gabon, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GbAdditionalAddressbaseislands = new Dataset("gb-additional-addressbaseislands", Country.UnitedKingdom, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV1 }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalBusiness = new Dataset("gb-additional-business", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalBusinessextended = new Dataset("gb-additional-businessextended", Country.UnitedKingdom, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV1 }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalElectricity = new Dataset("gb-additional-electricity", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalGas = new Dataset("gb-additional-gas", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalMultipleresidence = new Dataset("gb-additional-multipleresidence", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalNames = new Dataset("gb-additional-names", Country.UnitedKingdom, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            GbAdditionalNotyetbuilt = new Dataset("gb-additional-notyetbuilt", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            GbAddress = new Dataset("gb-address", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            GbAddressAddressbase = new Dataset("gb-address-addressbase", Country.UnitedKingdom, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV1 }, Accuracy.APlus, Accuracy.APlus);
            GbAddressStreetlevel = new Dataset("gb-address-streetlevel", Country.UnitedKingdom, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            GbAddressWales = new Dataset("gb-address-wales", Country.UnitedKingdom, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.APlus, Accuracy.APlus);
            GdAddressEd = new Dataset("gd-address-ed", Country.Grenada, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GdAddressEh = new Dataset("gd-address-eh", Country.Grenada, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GeAddressEd = new Dataset("ge-address-ed", Country.Georgia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            GeAddressEh = new Dataset("ge-address-eh", Country.Georgia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            GfAddressEd = new Dataset("gf-address-ed", Country.FrenchGuiana, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GfAddressEh = new Dataset("gf-address-eh", Country.FrenchGuiana, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GhAddressEd = new Dataset("gh-address-ed", Country.Ghana, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GhAddressEh = new Dataset("gh-address-eh", Country.Ghana, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GiAddressEd = new Dataset("gi-address-ed", Country.Gibraltar, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            GiAddressEh = new Dataset("gi-address-eh", Country.Gibraltar, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            GlAddressEd = new Dataset("gl-address-ed", Country.Greenland, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GlAddressEh = new Dataset("gl-address-eh", Country.Greenland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GmAddressEd = new Dataset("gm-address-ed", Country.Gambia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GmAddressEh = new Dataset("gm-address-eh", Country.Gambia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GnAddressEd = new Dataset("gn-address-ed", Country.Guinea, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GnAddressEh = new Dataset("gn-address-eh", Country.Guinea, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GpAddressEd = new Dataset("gp-address-ed", Country.Guadeloupe, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GpAddressEh = new Dataset("gp-address-eh", Country.Guadeloupe, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GqAddressEd = new Dataset("gq-address-ed", Country.EquatorialGuinea, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GqAddressEh = new Dataset("gq-address-eh", Country.EquatorialGuinea, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GrAddressEd = new Dataset("gr-address-ed", Country.Greece, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            GrAddressEh = new Dataset("gr-address-eh", Country.Greece, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            GsAddressEd = new Dataset("gs-address-ed", Country.SouthGeorgiaAndTheSouthSandwichIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GsAddressEh = new Dataset("gs-address-eh", Country.SouthGeorgiaAndTheSouthSandwichIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GtAddressEd = new Dataset("gt-address-ed", Country.Guatemala, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            GtAddressEh = new Dataset("gt-address-eh", Country.Guatemala, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            GuAddressEd = new Dataset("gu-address-ed", Country.Guam, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GuAddressEh = new Dataset("gu-address-eh", Country.Guam, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            GyAddressEd = new Dataset("gy-address-ed", Country.Guyana, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            GyAddressEh = new Dataset("gy-address-eh", Country.Guyana, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            HkAddressEd = new Dataset("hk-address-ed", Country.HongKong, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            HkAddressEh = new Dataset("hk-address-eh", Country.HongKong, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            HnAddressEd = new Dataset("hn-address-ed", Country.Honduras, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            HnAddressEh = new Dataset("hn-address-eh", Country.Honduras, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            HrAddressEd = new Dataset("hr-address-ed", Country.Croatia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            HrAddressEh = new Dataset("hr-address-eh", Country.Croatia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            HtAddressEd = new Dataset("ht-address-ed", Country.Haiti, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            HtAddressEh = new Dataset("ht-address-eh", Country.Haiti, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            HuAddressEd = new Dataset("hu-address-ed", Country.Hungary, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            HuAddressEh = new Dataset("hu-address-eh", Country.Hungary, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            IdAddressEd = new Dataset("id-address-ed", Country.Indonesia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            IdAddressEh = new Dataset("id-address-eh", Country.Indonesia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            IeAdditionalEircode = new Dataset("ie-additional-eircode", Country.Ireland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.APlus);
            IeAddress = new Dataset("ie-address", Country.Ireland, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            IeAddressEcad = new Dataset("ie-address-ecad", Country.Ireland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2, SearchType.Singleline, SearchType.Typedown }, Accuracy.APlus, Accuracy.APlus);
            IeAddressEh = new Dataset("ie-address-eh", Country.Ireland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            IlAddressEd = new Dataset("il-address-ed", Country.Israel, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            IlAddressEh = new Dataset("il-address-eh", Country.Israel, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            InAddressEd = new Dataset("in-address-ed", Country.India, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            InAddressEh = new Dataset("in-address-eh", Country.India, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            IoAddressEd = new Dataset("io-address-ed", Country.BritishIndianOceanTerritory, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.B);
            IqAddressEd = new Dataset("iq-address-ed", Country.Iraq, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            IqAddressEh = new Dataset("iq-address-eh", Country.Iraq, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            IrAddressEd = new Dataset("ir-address-ed", Country.Iran, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            IrAddressEh = new Dataset("ir-address-eh", Country.Iran, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            IsAddressEd = new Dataset("is-address-ed", Country.Iceland, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            IsAddressEh = new Dataset("is-address-eh", Country.Iceland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            ItAddressEd = new Dataset("it-address-ed", Country.Italy, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ItAddressEh = new Dataset("it-address-eh", Country.Italy, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            JmAddressEd = new Dataset("jm-address-ed", Country.Jamaica, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            JmAddressEh = new Dataset("jm-address-eh", Country.Jamaica, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            JoAddressEd = new Dataset("jo-address-ed", Country.Jordan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            JoAddressEh = new Dataset("jo-address-eh", Country.Jordan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            JpAddress = new Dataset("jp-address", Country.Japan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.A);
            JpAddressEa = new Dataset("jp-address-ea", Country.Japan, new List<SearchType> { SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.A);
            JpAddressEd = new Dataset("jp-address-ed", Country.Japan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.AMinus, Accuracy.B);
            KeAddressEd = new Dataset("ke-address-ed", Country.Kenya, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            KeAddressEh = new Dataset("ke-address-eh", Country.Kenya, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            KgAddressEd = new Dataset("kg-address-ed", Country.Kyrgyzstan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            KgAddressEh = new Dataset("kg-address-eh", Country.Kyrgyzstan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            KhAddressEd = new Dataset("kh-address-ed", Country.Cambodia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            KhAddressEh = new Dataset("kh-address-eh", Country.Cambodia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            KiAddressEd = new Dataset("ki-address-ed", Country.Kiribati, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            KiAddressEh = new Dataset("ki-address-eh", Country.Kiribati, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            KmAddressEd = new Dataset("km-address-ed", Country.Comoros, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            KmAddressEh = new Dataset("km-address-eh", Country.Comoros, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            KnAddressEd = new Dataset("kn-address-ed", Country.SaintKittsAndNevis, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            KnAddressEh = new Dataset("kn-address-eh", Country.SaintKittsAndNevis, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            KpAddressEd = new Dataset("kp-address-ed", Country.KoreaDemocraticPeoplesRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            KpAddressEh = new Dataset("kp-address-eh", Country.KoreaDemocraticPeoplesRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            KrAddressEd = new Dataset("kr-address-ed", Country.KoreaRepublic, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            KrAddressEh = new Dataset("kr-address-eh", Country.KoreaRepublic, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            KwAddressEd = new Dataset("kw-address-ed", Country.Kuwait, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            KwAddressEh = new Dataset("kw-address-eh", Country.Kuwait, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            KyAddressEd = new Dataset("ky-address-ed", Country.CaymanIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            KyAddressEh = new Dataset("ky-address-eh", Country.CaymanIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            KzAddressEd = new Dataset("kz-address-ed", Country.Kazakhstan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            KzAddressEh = new Dataset("kz-address-eh", Country.Kazakhstan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LaAddressEd = new Dataset("la-address-ed", Country.Laos, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            LaAddressEh = new Dataset("la-address-eh", Country.Laos, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            LbAddressEd = new Dataset("lb-address-ed", Country.Lebanon, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LbAddressEh = new Dataset("lb-address-eh", Country.Lebanon, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LcAddressEd = new Dataset("lc-address-ed", Country.SaintLucia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            LcAddressEh = new Dataset("lc-address-eh", Country.SaintLucia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            LiAddressEd = new Dataset("li-address-ed", Country.Liechtenstein, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LiAddressEh = new Dataset("li-address-eh", Country.Liechtenstein, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LkAddressEd = new Dataset("lk-address-ed", Country.SriLanka, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LkAddressEh = new Dataset("lk-address-eh", Country.SriLanka, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LrAddressEd = new Dataset("lr-address-ed", Country.Liberia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            LrAddressEh = new Dataset("lr-address-eh", Country.Liberia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            LsAddressEd = new Dataset("ls-address-ed", Country.Lesotho, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            LsAddressEh = new Dataset("ls-address-eh", Country.Lesotho, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            LtAddressEd = new Dataset("lt-address-ed", Country.Lithuania, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LtAddressEh = new Dataset("lt-address-eh", Country.Lithuania, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LuAddress = new Dataset("lu-address", Country.Luxembourg, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LuAddressEh = new Dataset("lu-address-eh", Country.Luxembourg, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LvAddressEd = new Dataset("lv-address-ed", Country.Latvia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            LvAddressEh = new Dataset("lv-address-eh", Country.Latvia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            LyAddressEd = new Dataset("ly-address-ed", Country.Libya, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            LyAddressEh = new Dataset("ly-address-eh", Country.Libya, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MaAddressEd = new Dataset("ma-address-ed", Country.Morocco, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            MaAddressEh = new Dataset("ma-address-eh", Country.Morocco, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            McAddressEd = new Dataset("mc-address-ed", Country.Monaco, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            McAddressEh = new Dataset("mc-address-eh", Country.Monaco, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            MdAddressEd = new Dataset("md-address-ed", Country.Moldova, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            MdAddressEh = new Dataset("md-address-eh", Country.Moldova, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            MeAddressEd = new Dataset("me-address-ed", Country.Montenegro, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            MeAddressEh = new Dataset("me-address-eh", Country.Montenegro, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            MfAddressEd = new Dataset("mf-address-ed", Country.SaintMartin, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MfAddressEh = new Dataset("mf-address-eh", Country.SaintMartin, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MgAddressEd = new Dataset("mg-address-ed", Country.Madagascar, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MgAddressEh = new Dataset("mg-address-eh", Country.Madagascar, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MhAddressEd = new Dataset("mh-address-ed", Country.MarshallIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MhAddressEh = new Dataset("mh-address-eh", Country.MarshallIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MkAddressEd = new Dataset("mk-address-ed", Country.NorthMacedonia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            MkAddressEh = new Dataset("mk-address-eh", Country.NorthMacedonia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            MlAddressEd = new Dataset("ml-address-ed", Country.Mali, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MlAddressEh = new Dataset("ml-address-eh", Country.Mali, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MmAddressEd = new Dataset("mm-address-ed", Country.Myanmar, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MmAddressEh = new Dataset("mm-address-eh", Country.Myanmar, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MnAddressEd = new Dataset("mn-address-ed", Country.Mongolia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MnAddressEh = new Dataset("mn-address-eh", Country.Mongolia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MoAddressEd = new Dataset("mo-address-ed", Country.Macau, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MoAddressEh = new Dataset("mo-address-eh", Country.Macau, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MpAddressEd = new Dataset("mp-address-ed", Country.NorthernMarianaIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MpAddressEh = new Dataset("mp-address-eh", Country.NorthernMarianaIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MqAddressEd = new Dataset("mq-address-ed", Country.Martinique, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MqAddressEh = new Dataset("mq-address-eh", Country.Martinique, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MrAddressEd = new Dataset("mr-address-ed", Country.Mauritania, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MrAddressEh = new Dataset("mr-address-eh", Country.Mauritania, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MsAddressEd = new Dataset("ms-address-ed", Country.Montserrat, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MsAddressEh = new Dataset("ms-address-eh", Country.Montserrat, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MtAddressEd = new Dataset("mt-address-ed", Country.Malta, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            MtAddressEh = new Dataset("mt-address-eh", Country.Malta, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            MuAddressEd = new Dataset("mu-address-ed", Country.Mauritius, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MuAddressEh = new Dataset("mu-address-eh", Country.Mauritius, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MvAddressEd = new Dataset("mv-address-ed", Country.Maldives, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MvAddressEh = new Dataset("mv-address-eh", Country.Maldives, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MwAddressEd = new Dataset("mw-address-ed", Country.Malawi, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MwAddressEh = new Dataset("mw-address-eh", Country.Malawi, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            MxAddressEd = new Dataset("mx-address-ed", Country.Mexico, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            MxAddressEh = new Dataset("mx-address-eh", Country.Mexico, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            MyAddressEd = new Dataset("my-address-ed", Country.Malaysia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            MyAddressEh = new Dataset("my-address-eh", Country.Malaysia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            MzAddressEd = new Dataset("mz-address-ed", Country.Mozambique, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            MzAddressEh = new Dataset("mz-address-eh", Country.Mozambique, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NaAddressEd = new Dataset("na-address-ed", Country.Namibia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NaAddressEh = new Dataset("na-address-eh", Country.Namibia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NcAddressEd = new Dataset("nc-address-ed", Country.NewCaledonia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NcAddressEh = new Dataset("nc-address-eh", Country.NewCaledonia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NeAddressEd = new Dataset("ne-address-ed", Country.Niger, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NeAddressEh = new Dataset("ne-address-eh", Country.Niger, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NfAddressEd = new Dataset("nf-address-ed", Country.NorfolkIsland, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NfAddressEh = new Dataset("nf-address-eh", Country.NorfolkIsland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NgAddressEd = new Dataset("ng-address-ed", Country.Nigeria, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NgAddressEh = new Dataset("ng-address-eh", Country.Nigeria, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NiAddressEd = new Dataset("ni-address-ed", Country.Nicaragua, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            NiAddressEh = new Dataset("ni-address-eh", Country.Nicaragua, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            NlAddress = new Dataset("nl-address", Country.Netherlands, new List<SearchType> { SearchType.Singleline, SearchType.Typedown, SearchType.Validate }, Accuracy.B, Accuracy.APlus);
            NlAddressEh = new Dataset("nl-address-eh", Country.Netherlands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            NoAddress = new Dataset("no-address", Country.Norway, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            NoAddressEd = new Dataset("no-address-ed", Country.Norway, new List<SearchType> { SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            NoAddressEh = new Dataset("no-address-eh", Country.Norway, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            NpAddressEd = new Dataset("np-address-ed", Country.Nepal, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NpAddressEh = new Dataset("np-address-eh", Country.Nepal, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NrAddressEd = new Dataset("nr-address-ed", Country.Nauru, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NrAddressEh = new Dataset("nr-address-eh", Country.Nauru, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NuAddressEd = new Dataset("nu-address-ed", Country.Niue, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            NuAddressEh = new Dataset("nu-address-eh", Country.Niue, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            NzAdditionalDatafusion = new Dataset("nz-additional-datafusion", Country.NewZealand, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            NzAddress = new Dataset("nz-address", Country.NewZealand, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            OmAddressEd = new Dataset("om-address-ed", Country.Oman, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            OmAddressEh = new Dataset("om-address-eh", Country.Oman, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PaAddressEd = new Dataset("pa-address-ed", Country.Panama, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PaAddressEh = new Dataset("pa-address-eh", Country.Panama, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PeAddressEd = new Dataset("pe-address-ed", Country.Peru, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PeAddressEh = new Dataset("pe-address-eh", Country.Peru, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PfAddressEd = new Dataset("pf-address-ed", Country.FrenchPolynesia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PfAddressEh = new Dataset("pf-address-eh", Country.FrenchPolynesia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PgAddressEd = new Dataset("pg-address-ed", Country.PapuaNewGuinea, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PgAddressEh = new Dataset("pg-address-eh", Country.PapuaNewGuinea, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PhAddressEd = new Dataset("ph-address-ed", Country.Philippines, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PhAddressEh = new Dataset("ph-address-eh", Country.Philippines, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PkAddressEd = new Dataset("pk-address-ed", Country.Pakistan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            PkAddressEh = new Dataset("pk-address-eh", Country.Pakistan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            PlAddressEd = new Dataset("pl-address-ed", Country.Poland, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PlAddressEh = new Dataset("pl-address-eh", Country.Poland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PmAddressEd = new Dataset("pm-address-ed", Country.SaintPierreAndMiquelon, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PmAddressEh = new Dataset("pm-address-eh", Country.SaintPierreAndMiquelon, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PnAddressEd = new Dataset("pn-address-ed", Country.PitcairnIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PnAddressEh = new Dataset("pn-address-eh", Country.PitcairnIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PsAddressEd = new Dataset("ps-address-ed", Country.Palestine, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PsAddressEh = new Dataset("ps-address-eh", Country.Palestine, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PtAddressEd = new Dataset("pt-address-ed", Country.Portugal, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PtAddressEh = new Dataset("pt-address-eh", Country.Portugal, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            PwAddressEd = new Dataset("pw-address-ed", Country.Palau, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            PwAddressEh = new Dataset("pw-address-eh", Country.Palau, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            PyAddressEd = new Dataset("py-address-ed", Country.Paraguay, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            PyAddressEh = new Dataset("py-address-eh", Country.Paraguay, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            QaAddressEd = new Dataset("qa-address-ed", Country.Qatar, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            QaAddressEh = new Dataset("qa-address-eh", Country.Qatar, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            ReAddressEd = new Dataset("re-address-ed", Country.Reunion, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ReAddressEh = new Dataset("re-address-eh", Country.Reunion, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            RoAddressEd = new Dataset("ro-address-ed", Country.Romania, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            RoAddressEh = new Dataset("ro-address-eh", Country.Romania, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            RsAddressEd = new Dataset("rs-address-ed", Country.Serbia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            RsAddressEh = new Dataset("rs-address-eh", Country.Serbia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            RuAddressEd = new Dataset("ru-address-ed", Country.RussianFederation, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            RuAddressEh = new Dataset("ru-address-eh", Country.RussianFederation, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            RwAddressEd = new Dataset("rw-address-ed", Country.Rwanda, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            RwAddressEh = new Dataset("rw-address-eh", Country.Rwanda, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SaAddressEd = new Dataset("sa-address-ed", Country.SaudiArabia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SaAddressEh = new Dataset("sa-address-eh", Country.SaudiArabia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SbAddressEd = new Dataset("sb-address-ed", Country.SolomonIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SbAddressEh = new Dataset("sb-address-eh", Country.SolomonIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ScAddressEd = new Dataset("sc-address-ed", Country.Seychelles, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ScAddressEh = new Dataset("sc-address-eh", Country.Seychelles, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SdAddressEd = new Dataset("sd-address-ed", Country.Sudan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SdAddressEh = new Dataset("sd-address-eh", Country.Sudan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SeAddress = new Dataset("se-address", Country.Sweden, new List<SearchType> { SearchType.Singleline, SearchType.Typedown }, Accuracy.A, Accuracy.APlus);
            SeAddressEd = new Dataset("se-address-ed", Country.Sweden, new List<SearchType> { SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SeAddressEh = new Dataset("se-address-eh", Country.Sweden, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SgAddress = new Dataset("sg-address", Country.Singapore, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            ShAddressEd = new Dataset("sh-address-ed", Country.SaintHelena, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ShAddressEh = new Dataset("sh-address-eh", Country.SaintHelena, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SiAddressEd = new Dataset("si-address-ed", Country.Slovenia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SiAddressEh = new Dataset("si-address-eh", Country.Slovenia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SjAddressEd = new Dataset("sj-address-ed", Country.SvalbardAndJanMayenIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SjAddressEh = new Dataset("sj-address-eh", Country.SvalbardAndJanMayenIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SkAddressEd = new Dataset("sk-address-ed", Country.Slovakia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SkAddressEh = new Dataset("sk-address-eh", Country.Slovakia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SlAddressEd = new Dataset("sl-address-ed", Country.SierraLeone, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SlAddressEh = new Dataset("sl-address-eh", Country.SierraLeone, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SmAddressEd = new Dataset("sm-address-ed", Country.SanMarino, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SmAddressEh = new Dataset("sm-address-eh", Country.SanMarino, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SnAddressEd = new Dataset("sn-address-ed", Country.Senegal, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SnAddressEh = new Dataset("sn-address-eh", Country.Senegal, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SoAddressEd = new Dataset("so-address-ed", Country.Somalia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SoAddressEh = new Dataset("so-address-eh", Country.Somalia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SrAddressEd = new Dataset("sr-address-ed", Country.Suriname, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SrAddressEh = new Dataset("sr-address-eh", Country.Suriname, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SsAddressEd = new Dataset("ss-address-ed", Country.SouthSudan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SsAddressEh = new Dataset("ss-address-eh", Country.SouthSudan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            StAddressEd = new Dataset("st-address-ed", Country.SaoTomeAndPrincipe, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            StAddressEh = new Dataset("st-address-eh", Country.SaoTomeAndPrincipe, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SvAddressEd = new Dataset("sv-address-ed", Country.ElSalvador, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            SvAddressEh = new Dataset("sv-address-eh", Country.ElSalvador, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            SyAddressEd = new Dataset("sy-address-ed", Country.Syria, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SyAddressEh = new Dataset("sy-address-eh", Country.Syria, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            SzAddressEd = new Dataset("sz-address-ed", Country.Swaziland, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            SzAddressEh = new Dataset("sz-address-eh", Country.Swaziland, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TcAddressEd = new Dataset("tc-address-ed", Country.TurksAndCaicosIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TcAddressEh = new Dataset("tc-address-eh", Country.TurksAndCaicosIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TdAddressEd = new Dataset("td-address-ed", Country.Chad, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TdAddressEh = new Dataset("td-address-eh", Country.Chad, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TgAddressEd = new Dataset("tg-address-ed", Country.Togo, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TgAddressEh = new Dataset("tg-address-eh", Country.Togo, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ThAddressEd = new Dataset("th-address-ed", Country.Thailand, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ThAddressEh = new Dataset("th-address-eh", Country.Thailand, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            TjAddressEd = new Dataset("tj-address-ed", Country.Tajikistan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TjAddressEh = new Dataset("tj-address-eh", Country.Tajikistan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TkAddressEd = new Dataset("tk-address-ed", Country.Tokelau, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TkAddressEh = new Dataset("tk-address-eh", Country.Tokelau, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TlAddressEd = new Dataset("tl-address-ed", Country.TimorLeste, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TlAddressEh = new Dataset("tl-address-eh", Country.TimorLeste, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TmAddressEd = new Dataset("tm-address-ed", Country.Turkmenistan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TmAddressEh = new Dataset("tm-address-eh", Country.Turkmenistan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TnAddressEd = new Dataset("tn-address-ed", Country.Tunisia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            TnAddressEh = new Dataset("tn-address-eh", Country.Tunisia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            ToAddressEd = new Dataset("to-address-ed", Country.Tonga, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ToAddressEh = new Dataset("to-address-eh", Country.Tonga, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TrAddressEd = new Dataset("tr-address-ed", Country.Turkey, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            TrAddressEh = new Dataset("tr-address-eh", Country.Turkey, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            TtAddressEd = new Dataset("tt-address-ed", Country.TrinidadAndTobago, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TtAddressEh = new Dataset("tt-address-eh", Country.TrinidadAndTobago, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TvAddressEd = new Dataset("tv-address-ed", Country.Tuvalu, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TvAddressEh = new Dataset("tv-address-eh", Country.Tuvalu, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            TwAddressEd = new Dataset("tw-address-ed", Country.Taiwan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            TwAddressEh = new Dataset("tw-address-eh", Country.Taiwan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            TzAddressEd = new Dataset("tz-address-ed", Country.Tanzania, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            TzAddressEh = new Dataset("tz-address-eh", Country.Tanzania, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            UaAddressEd = new Dataset("ua-address-ed", Country.Ukraine, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            UaAddressEh = new Dataset("ua-address-eh", Country.Ukraine, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            UgAddressEd = new Dataset("ug-address-ed", Country.Uganda, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            UgAddressEh = new Dataset("ug-address-eh", Country.Uganda, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            UsAddress = new Dataset("us-address", Country.UnitedStatesOfAmerica, new List<SearchType> { SearchType.Autocomplete, SearchType.Singleline, SearchType.Typedown, SearchType.Validate, SearchType.LookupV2 }, Accuracy.APlus, Accuracy.APlus);
            UyAddressEd = new Dataset("uy-address-ed", Country.Uruguay, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            UyAddressEh = new Dataset("uy-address-eh", Country.Uruguay, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            UzAddressEd = new Dataset("uz-address-ed", Country.Uzbekistan, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.AMinus);
            UzAddressEh = new Dataset("uz-address-eh", Country.Uzbekistan, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.AMinus);
            VaAddressEd = new Dataset("va-address-ed", Country.VaticanCity, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            VaAddressEh = new Dataset("va-address-eh", Country.VaticanCity, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            VcAddressEd = new Dataset("vc-address-ed", Country.SaintVincentAndTheGrenadines, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            VcAddressEh = new Dataset("vc-address-eh", Country.SaintVincentAndTheGrenadines, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            VeAddressEd = new Dataset("ve-address-ed", Country.Venezuela, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            VeAddressEh = new Dataset("ve-address-eh", Country.Venezuela, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.APlus);
            VgAddressEd = new Dataset("vg-address-ed", Country.VirginIslandsBritish, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            VgAddressEh = new Dataset("vg-address-eh", Country.VirginIslandsBritish, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ViAddressEd = new Dataset("vi-address-ed", Country.VirginIslandsUS, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ViAddressEh = new Dataset("vi-address-eh", Country.VirginIslandsUS, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            VnAddressEd = new Dataset("vn-address-ed", Country.Vietnam, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            VnAddressEh = new Dataset("vn-address-eh", Country.Vietnam, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            VuAddressEd = new Dataset("vu-address-ed", Country.Vanuatu, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            VuAddressEh = new Dataset("vu-address-eh", Country.Vanuatu, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            WfAddressEd = new Dataset("wf-address-ed", Country.WallisAndFutunaIslands, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            WfAddressEh = new Dataset("wf-address-eh", Country.WallisAndFutunaIslands, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            WsAddressEd = new Dataset("ws-address-ed", Country.Samoa, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            WsAddressEh = new Dataset("ws-address-eh", Country.Samoa, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            XkAddressEd = new Dataset("xk-address-ed", Country.Kosovo, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            XkAddressEh = new Dataset("xk-address-eh", Country.Kosovo, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            YeAddressEd = new Dataset("ye-address-ed", Country.Yemen, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            YeAddressEh = new Dataset("ye-address-eh", Country.Yemen, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            YtAddressEd = new Dataset("yt-address-ed", Country.Mayotte, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            YtAddressEh = new Dataset("yt-address-eh", Country.Mayotte, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ZaAddressEd = new Dataset("za-address-ed", Country.SouthAfrica, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.A, Accuracy.APlus);
            ZaAddressEh = new Dataset("za-address-eh", Country.SouthAfrica, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.A, Accuracy.APlus);
            ZmAddressEd = new Dataset("zm-address-ed", Country.Zambia, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ZmAddressEh = new Dataset("zm-address-eh", Country.Zambia, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
            ZwAddressEd = new Dataset("zw-address-ed", Country.Zimbabwe, new List<SearchType> { SearchType.Singleline, SearchType.Validate }, Accuracy.B, Accuracy.BMinus);
            ZwAddressEh = new Dataset("zw-address-eh", Country.Zimbabwe, new List<SearchType> { SearchType.Autocomplete, SearchType.LookupV2 }, Accuracy.AMinus, Accuracy.BMinus);
        }

        private Dataset(string datasetCode, Country country, List<SearchType> searchTypes, Accuracy addressAccuracy, Accuracy geocodeAccuracy)
        {
            DatasetCode = datasetCode;
            Country = country;
            SearchTypes = searchTypes;
            AddressAccuracy = addressAccuracy;
            GeocodeAccuracy = geocodeAccuracy;

            if (!datasetMap.TryAdd(datasetCode, this))
            {
                throw new ArgumentException($"Dataset with code '{datasetCode}' already exists.", nameof(datasetCode));
            }
        }

        public static Dataset FromCode(string? datasetCode)
        {
            if (!string.IsNullOrWhiteSpace(datasetCode))
            {
                return datasetMap.TryGetValue(datasetCode, out var dataset) ? dataset : throw new KeyNotFoundException($"Dataset code '{datasetCode}' not found.");
            }

            throw new KeyNotFoundException($"Dataset code '{datasetCode}' not found.");
        }
    }
}